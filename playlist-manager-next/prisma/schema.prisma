datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

model access_token {
  id            Int     @id @default(autoincrement())
  user_id       String  @unique(map: "dbaccesstoken_user_id") @db.VarChar(255)
  access_token  String? @db.VarChar(400)
  refresh_token String? @db.VarChar(200)
  user          user    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  token_type   String? @db.VarChar(50)
  expires_in   Int?    @db.Integer
}

model album {
  id                             String                           @id @db.VarChar(255)
  album_type                     String                           @db.VarChar(255)
  total_tracks                   Int
  image_url                      String                           @db.VarChar(255)
  name                           String                           @db.VarChar(255)
  release_date                   DateTime                         @db.Date
  release_date_precision         String                           @db.VarChar(255)
  label                          String?                          @db.VarChar(255)
  uri                            String                           @db.VarChar(255)
  album_notes                    album_notes[]
  albumartistrelationship        albumartistrelationship[]
  albumgenrerelationship         albumgenrerelationship[]
  playbackstatealbumrelationship playbackstatealbumrelationship[]
  playlistalbumrelationship      playlistalbumrelationship[]
  tracks                          track[]
}

model album_notes {
  id       String @id @db.VarChar(255)
  text     String @db.VarChar(255)
  album_id String @db.VarChar(255)
  album    album  @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([album_id], map: "dbalbumnote_album_id")
}

model albumartistrelationship {
  id        Int    @id @default(autoincrement())
  album_id  String @db.VarChar(255)
  artist_id String @db.VarChar(255)
  album     album  @relation(fields: [album_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  artist    artist @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([album_id, artist_id], map: "albumartistrelationship_album_id_artist_id")
  @@index([album_id], map: "albumartistrelationship_album_id")
  @@index([artist_id], map: "albumartistrelationship_artist_id")
}

model albumgenrerelationship {
  id       Int    @id @default(autoincrement())
  album_id String @db.VarChar(255)
  genre_id Int
  album    album  @relation(fields: [album_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  genre    genre  @relation(fields: [genre_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([album_id, genre_id], map: "albumgenrerelationship_album_id_genre_id")
  @@index([album_id], map: "albumgenrerelationship_album_id")
  @@index([genre_id], map: "albumgenrerelationship_genre_id")
}

model artist {
  id                      String                    @id @db.VarChar(255)
  image_url               String?                   @db.VarChar(255)
  name                    String                    @db.VarChar(255)
  uri                     String                    @db.VarChar(255)
  albumartistrelationship albumartistrelationship[]
  trackartistrelationship trackartistrelationship[]
}

model genre {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique(map: "dbgenre_name") @db.VarChar(255)
  albumgenrerelationship albumgenrerelationship[]
}

model playback_state {
  id                                Int                                 @id @default(autoincrement())
  item_id                           String?                             @db.VarChar(255)
  progress_ms                       BigInt?
  timestamp                         DateTime                            @db.Date
  type                              String                              @db.VarChar(255)
  track                             track?                              @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  playbackstatealbumrelationship    playbackstatealbumrelationship[]
  playbackstateplaylistrelationship playbackstateplaylistrelationship[]

  @@index([item_id], map: "dbplaybackstate_item_id")
}

model playbackstatealbumrelationship {
  id                Int            @id @default(autoincrement())
  playback_state_id Int
  album_id          String         @db.VarChar(255)
  user_id           String         @db.VarChar(255)
  album             album          @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  playback_state    playback_state @relation(fields: [playback_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user              user           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([playback_state_id, album_id, user_id], map: "playbackstatealbumrelationship_playback_state_id_album_i_d70e1f")
  @@index([album_id], map: "playbackstatealbumrelationship_album_id")
  @@index([playback_state_id], map: "playbackstatealbumrelationship_playback_state_id")
  @@index([user_id], map: "playbackstatealbumrelationship_user_id")
}

model playbackstateplaylistrelationship {
  id                Int            @id @default(autoincrement())
  playback_state_id Int
  playlist_id       String         @db.VarChar(255)
  user_id           String         @db.VarChar(255)
  playback_state    playback_state @relation(fields: [playback_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  playlist          playlist       @relation(fields: [playlist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user              user           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([playback_state_id, playlist_id, user_id], map: "playbackstateplaylistrelationship_playback_state_id_play_7a32ab")
  @@index([playback_state_id], map: "playbackstateplaylistrelationship_playback_state_id")
  @@index([playlist_id], map: "playbackstateplaylistrelationship_playlist_id")
  @@index([user_id], map: "playbackstateplaylistrelationship_user_id")
}

model playlist {
  id                                String                              @id @db.VarChar(255)
  description                       String                              @db.VarChar(255)
  image_url                         String?                             @db.VarChar(255)
  name                              String                              @db.VarChar(255)
  user_id                           String                              @db.VarChar(255)
  snapshot_id                       String                              @db.VarChar(255)
  uri                               String                              @db.VarChar(255)
  created_at                        DateTime                            @default(now())
  updated_at                        DateTime                            @default(now())
  playbackstateplaylistrelationship playbackstateplaylistrelationship[]
  user                              user                                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  playlistalbumrelationship         playlistalbumrelationship[]

  @@index([user_id], map: "dbplaylist_user_id")
}

model playlistalbumrelationship {
  id          Int      @id @default(autoincrement())
  playlist_id String   @db.VarChar(255)
  album_id    String   @db.VarChar(255)
  album_index Int?
  album       album    @relation(fields: [album_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  playlist    playlist @relation(fields: [playlist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([playlist_id, album_id], map: "playlistalbumrelationship_playlist_id_album_id")
  @@unique([playlist_id, album_index], map: "unique_playlist_albumindex")
  @@index([album_id], map: "playlistalbumrelationship_album_id")
  @@index([playlist_id], map: "playlistalbumrelationship_playlist_id")
}

model track {
  id                      String                    @id @db.VarChar(255)
  name                    String                    @db.VarChar(255)
  album_id                String                    @db.VarChar(255)
  disc_number             Int
  track_number            Int
  duration_ms             Int
  uri                     String                    @db.VarChar(255)
  playback_state          playback_state[]
  album                   album                     @relation(fields: [album_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  trackartistrelationship trackartistrelationship[]

  @@index([album_id], map: "dbtrack_album_id")
}

model trackartistrelationship {
  id        Int    @id @default(autoincrement())
  track_id  String @db.VarChar(255)
  artist_id String @db.VarChar(255)
  artist    artist @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  track     track  @relation(fields: [track_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([track_id, artist_id], map: "trackartistrelationship_track_id_artist_id")
  @@index([artist_id], map: "trackartistrelationship_artist_id")
  @@index([track_id], map: "trackartistrelationship_track_id")
}

model user {
  id                                String                              @id @db.VarChar(255)
  display_name                      String                              @db.VarChar(255)
  image_url                         String                              @db.VarChar(600)
  uri                               String                              @db.VarChar(255)
  auth0_id                          String?                             @db.VarChar
  access_token                      access_token?
  playbackstatealbumrelationship    playbackstatealbumrelationship[]
  playbackstateplaylistrelationship playbackstateplaylistrelationship[]
  playlist                          playlist[]
}
